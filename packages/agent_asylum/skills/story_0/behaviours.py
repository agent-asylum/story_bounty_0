# ------------------------------------------------------------------------------
#
#   Copyright 2023
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour that autogenerated from the protocol ``."""

import os
from abc import ABC
from enum import Enum
from typing import Any

from aea.skills.behaviours import State, FSMBehaviour


class Story0abciappEvents(Enum):
    """Events for the fsm."""

    DONE = "DONE"
    ERROR = "ERROR"


class Story0abciappStates(Enum):
    """States for the fsm."""

    VERIFICATIONROUND = "verificationround"
    FINISHEDROUND = "finishedround"
    INITIALIZATIONROUND = "initializationround"
    COMPILATIONROUND = "compilationround"
    ERRORROUND = "errorround"
    DEPLOYMENTROUND = "deploymentround"


class BaseState(State, ABC):
    """Base class for states."""

    _state: Story0abciappStates = None

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._event = None
        self._is_done = False  # Initially, the state is not done

    def act(self) -> None:
        """Perform the act."""
        self._is_done = True
        self._event = Story0abciappEvents.DONE

    def is_done(self) -> bool:
        """Is done."""
        return self._is_done

    @property
    def event(self) -> str | None:
        """Current event."""
        return self._event


# Define states


class VerificationRound(BaseState):
    """This class implements the behaviour of the state VerificationRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Story0abciappStates.VERIFICATIONROUND


class FinishedRound(BaseState):
    """This class implements the behaviour of the state FinishedRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Story0abciappStates.FINISHEDROUND


class InitializationRound(BaseState):
    """This class implements the behaviour of the state InitializationRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Story0abciappStates.INITIALIZATIONROUND


class CompilationRound(BaseState):
    """This class implements the behaviour of the state CompilationRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Story0abciappStates.COMPILATIONROUND


class ErrorRound(BaseState):
    """This class implements the behaviour of the state ErrorRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Story0abciappStates.ERRORROUND


class DeploymentRound(BaseState):
    """This class implements the behaviour of the state DeploymentRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = Story0abciappStates.DEPLOYMENTROUND


class Story0abciappFsmBehaviour(FSMBehaviour):
    """This class implements a simple Finite State Machine behaviour."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self.register_state(Story0abciappStates.INITIALIZATIONROUND.value, InitializationRound(**kwargs), True)

        self.register_state(Story0abciappStates.FINISHEDROUND.value, FinishedRound(**kwargs))
        self.register_state(Story0abciappStates.ERRORROUND.value, ErrorRound(**kwargs))

        self.register_state(Story0abciappStates.VERIFICATIONROUND.value, VerificationRound(**kwargs))
        self.register_state(Story0abciappStates.COMPILATIONROUND.value, CompilationRound(**kwargs))
        self.register_state(Story0abciappStates.DEPLOYMENTROUND.value, DeploymentRound(**kwargs))

        self.register_transition(
            source=Story0abciappStates.COMPILATIONROUND.value,
            event=Story0abciappEvents.DONE,
            destination=Story0abciappStates.DEPLOYMENTROUND.value,
        )
        self.register_transition(
            source=Story0abciappStates.COMPILATIONROUND.value,
            event=Story0abciappEvents.ERROR,
            destination=Story0abciappStates.ERRORROUND.value,
        )
        self.register_transition(
            source=Story0abciappStates.DEPLOYMENTROUND.value,
            event=Story0abciappEvents.DONE,
            destination=Story0abciappStates.VERIFICATIONROUND.value,
        )
        self.register_transition(
            source=Story0abciappStates.DEPLOYMENTROUND.value,
            event=Story0abciappEvents.ERROR,
            destination=Story0abciappStates.ERRORROUND.value,
        )
        self.register_transition(
            source=Story0abciappStates.INITIALIZATIONROUND.value,
            event=Story0abciappEvents.DONE,
            destination=Story0abciappStates.COMPILATIONROUND.value,
        )
        self.register_transition(
            source=Story0abciappStates.INITIALIZATIONROUND.value,
            event=Story0abciappEvents.ERROR,
            destination=Story0abciappStates.ERRORROUND.value,
        )
        self.register_transition(
            source=Story0abciappStates.VERIFICATIONROUND.value,
            event=Story0abciappEvents.DONE,
            destination=Story0abciappStates.FINISHEDROUND.value,
        )
        self.register_transition(
            source=Story0abciappStates.VERIFICATIONROUND.value,
            event=Story0abciappEvents.ERROR,
            destination=Story0abciappStates.ERRORROUND.value,
        )

    def setup(self) -> None:
        """Implement the setup."""
        self.context.logger.info("Setting up Story0abciapp FSM behaviour.")

    def teardown(self) -> None:
        """Implement the teardown."""
        self.context.logger.info("Tearing down Story0abciapp FSM behaviour.")

    def act(self) -> None:
        """Implement the act."""
        super().act()
        if self.current is None:
            self.context.logger.info("No state to act on.")
            self.terminate()

    def terminate(self) -> None:
        """Implement the termination."""
        os._exit(0)
